{"version":3,"sources":["actions/s3.js","components/s3Upload.js"],"names":["dmx","Actions","s3.upload","options","inp","this","parse","input","url","file","document","getElementById","files","Promise","resolve","reject","xhr","XMLHttpRequest","onerror","onabort","ontimeout","onload","open","setRequestHeader","type","send","Component","initialData","data","state","idle","ready","uploading","done","uploadProgress","position","total","percent","lastError","status","message","response","attributes","String","default","prop","accept","autoupload","Boolean","methods","abort","reset","select","click","upload","events","start","Event","error","success","ProgressEvent","render","node","$node","addEventListener","onDragover","bind","onDrop","onClick","createElement","props","onChange","onAbort","onError","onTimeout","onLoad","onProgress","$parse","update","e","stopPropagation","preventDefault","dataTransfer","dropEffect","items","length","validateDrag","updateFile","target","value","set","dispatchEvent","console","responseText","size","loaded","Math","ceil","lengthComputable","item","kind","info","name","date","lastModified","Date","lastModifiedDate","toISOString","dataUrl","indexOf","reader","FileReader","result","requestUpdate","readAsDataURL","upload2","encodeURIComponent","JSON","acl","substr","err"],"mappings":"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","file":"../dmxS3Upload/dmxS3Upload.js","sourcesContent":["dmx.Actions({\r\n\r\n    's3.upload': function(options) {\r\n        var inp = this.parse(options.input);\r\n        var url = this.parse(options.url);\r\n        var file = document.getElementById(inp).files[0];\r\n        \r\n        return new Promise(function(resolve, reject) {\r\n            var xhr = new XMLHttpRequest();\r\n\r\n            xhr.onerror = reject;\r\n            xhr.onabort = reject;\r\n            xhr.ontimeout = reject;\r\n            xhr.onload = resolve;\r\n\r\n            xhr.open('PUT', url);\r\n            xhr.setRequestHeader('Content-Type', file.type);\r\n            xhr.send(file);\r\n        });\r\n    }\r\n\r\n})","dmx.Component('s3-upload', {\r\n\r\n    initialData: {\r\n        data: null,\r\n        file: null,\r\n        state: {\r\n            idle: true,\r\n            ready: false,\r\n            uploading: false,\r\n            done: false\r\n        },\r\n        uploadProgress: {\r\n            position: 0,\r\n            total: 0,\r\n            percent: 0\r\n        },\r\n        lastError: {\r\n            status: 0,\r\n            message: '',\r\n            response: null\r\n        }\r\n    },\r\n\r\n    attributes: {\r\n        url: {\r\n            type: String,\r\n            default: null\r\n        },\r\n\r\n        prop: {\r\n            type: String,\r\n            default: 'url'\r\n        },\r\n\r\n        accept: {\r\n            type: String,\r\n            default: null\r\n        },\r\n\r\n        autoupload: {\r\n            type: Boolean,\r\n            default: false\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        abort: function() {\r\n            this.abort();\r\n        },\r\n\r\n        reset: function() {\r\n            this.reset();\r\n        },\r\n\r\n        select: function() {\r\n            this.input.click();\r\n        },\r\n\r\n        upload: function() {\r\n            this.upload();\r\n        }\r\n    },\r\n\r\n    events: {\r\n        start: Event, // when starting an ajax call\r\n        done: Event, // when ajax call completed (success and error)\r\n        error: Event, // server error or javascript error (json parse or network transport) or timeout error\r\n        abort: Event, // ajax call was aborted\r\n        success: Event, // successful ajax call,\r\n        upload: ProgressEvent // on upload progress\r\n    },\r\n\r\n    render: function(node) {\r\n        this.$node.addEventListener('dragover', this.onDragover.bind(this));\r\n        this.$node.addEventListener('drop', this.onDrop.bind(this));\r\n        this.$node.addEventListener('click', this.onClick.bind(this));\r\n        \r\n        this.input = document.createElement('input');\r\n        this.input.type = 'file';\r\n        this.input.accept = this.props.accept || '*/*';\r\n        this.input.addEventListener('change', this.onChange.bind(this));\r\n\r\n        this.xhr = new XMLHttpRequest();\r\n        this.xhr.addEventListener('abort', this.onAbort.bind(this));\r\n        this.xhr.addEventListener('error', this.onError.bind(this));\r\n        this.xhr.addEventListener('timeout', this.onTimeout.bind(this));\r\n        this.xhr.addEventListener('load', this.onLoad.bind(this));\r\n        this.xhr.upload.addEventListener('progress', this.onProgress.bind(this));\r\n\r\n        this.$parse();\r\n    },\r\n\r\n    update: function(props) {\r\n        if (this.props.accept != props.accept) {\r\n            this.input.accept = this.props.accept || '*/*';\r\n        }\r\n    },\r\n\r\n    onDragover: function(e) {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n\r\n        e.dataTransfer.dropEffect = e.dataTransfer.items.length == 1 && this.validateDrag(e.dataTransfer.items[0]) ? 'copy' : 'none';\r\n    },\r\n\r\n    onDrop: function(e) {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n\r\n        if (e.dataTransfer.files.length == 1) {\r\n            this.updateFile(e.dataTransfer.files[0]);\r\n        }\r\n    },\r\n\r\n    onClick: function(e) {\r\n        this.input.click();\r\n    },\r\n\r\n    onChange: function(e) {\r\n        this.updateFile(e.target.files[0]);\r\n        this.input.value = '';\r\n        this.input.type = '';\r\n        this.input.type = 'file';\r\n    },\r\n\r\n    onAbort: function(e) {\r\n        this.set({\r\n            data: null,\r\n            state: {\r\n                idle: false,\r\n                ready: true,\r\n                uploading: false,\r\n                done: false\r\n            },\r\n            uploadProgress: {\r\n                position: 0,\r\n                total: 0,\r\n                percent: 0\r\n            }\r\n        });\r\n\r\n        this.dispatchEvent('abort');\r\n        this.dispatchEvent('done');\r\n    },\r\n\r\n    onError: function(e) {\r\n        if (e instanceof ProgressEvent) {\r\n            e = 'Network error, perhaps no CORS set';\r\n        }\r\n\r\n        this.set({\r\n            data: null,\r\n            state: {\r\n                idle: false,\r\n                ready: true,\r\n                uploading: false,\r\n                done: false\r\n            },\r\n            uploadProgress: {\r\n                position: 0,\r\n                total: 0,\r\n                percent: 0\r\n            },\r\n            lastError: {\r\n                status: 0,\r\n                message: e,\r\n                response: null\r\n            }\r\n        });\r\n\r\n        console.error(e);\r\n\r\n        this.dispatchEvent('error');\r\n        this.dispatchEvent('done');\r\n    },\r\n\r\n    onTimeout: function(e) {\r\n        this.onError('Execution timeout');\r\n    },\r\n\r\n    onLoad: function(e) {\r\n        if (this.xhr.status >= 400) {\r\n            this.onError(this.xhr.responseText);\r\n        } else {\r\n            this.set({\r\n                state: {\r\n                    idle: false,\r\n                    ready: false,\r\n                    uploading: false,\r\n                    done: true\r\n                },\r\n                uploadProgress: {\r\n                    position: this.file.size,\r\n                    total: this.file.size,\r\n                    percent: 100\r\n                }\r\n            });\r\n\r\n            this.dispatchEvent('success');\r\n            this.dispatchEvent('done');\r\n        }\r\n    },\r\n\r\n    onProgress: function(e) {\r\n        this.set({\r\n            state: {\r\n                idle: false,\r\n                ready: false,\r\n                uploading: true,\r\n                done: false\r\n            },\r\n            uploadProgress: {\r\n                position: e.loaded,\r\n                total: this.file.size,\r\n                percent: Math.ceil(e.loaded / e.total * 100)\r\n            }\r\n        });\r\n\r\n        this.dispatchEvent('upload', {\r\n            lengthComputable: e.lengthComputable,\r\n            loaded: e.loaded,\r\n            total: e.total\r\n        });\r\n    },\r\n\r\n    validateDrag: function(item) {\r\n        // todo validate accept type\r\n        return item.kind == 'file';\r\n    },\r\n\r\n    updateFile: function(file) {\r\n        var info = {\r\n            name: file.name,\r\n            size: file.size,\r\n            type: file.type,\r\n            date: (file.lastModified ? new Date(file.lastModified) : file.lastModifiedDate).toISOString(),\r\n            dataUrl: null\r\n        };\r\n\r\n        if (file.type.indexOf('image/') !== -1 && !file.reader) {\r\n            file.reader = new FileReader();\r\n\r\n            file.reader.onload = function(e) {\r\n                info.dataUrl = e.target.result;\r\n                dmx.requestUpdate();\r\n            }.bind(this);\r\n\r\n            file.reader.readAsDataURL(file);\r\n        }\r\n\r\n        this.file = file;\r\n\r\n        this.set({\r\n            file: info,\r\n            state: {\r\n                idle: false,\r\n                ready: true,\r\n                uploading: false,\r\n                done: false\r\n            }\r\n        });\r\n\r\n        if (this.props.autoupload) {\r\n            this.upload();\r\n        }\r\n    },\r\n\r\n    abort: function() {\r\n        this.xhr.abort();\r\n    },\r\n\r\n    reset: function() {\r\n        this.abort();\r\n        this.file = null;\r\n        this.set({\r\n            data: null,\r\n            file: null,\r\n            state: {\r\n                idle: true,\r\n                ready: false,\r\n                uploading: false,\r\n                done: false\r\n            },\r\n            uploadProgress: {\r\n                position: 0,\r\n                total: 0,\r\n                percent: 0\r\n            },\r\n            lastError: {\r\n                status: 0,\r\n                message: '',\r\n                response: null\r\n            }\r\n        });\r\n    },\r\n\r\n    upload: function() {\r\n        if (!this.props.url) {\r\n            this.onError('No url attribute is set');\r\n            return;\r\n        }\r\n\r\n        this.set({\r\n            state: {\r\n                idle: false,\r\n                ready: false,\r\n                uploading: true,\r\n                done: false\r\n            }\r\n        });\r\n\r\n        this.dispatchEvent('start');\r\n\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.onabort = this.onAbort.bind(this);\r\n        xhr.onerror = this.onError.bind(this);\r\n        xhr.onload = this.upload2.bind(this, xhr);\r\n        xhr.open('GET', this.props.url + '?name=' + encodeURIComponent(this.file.name));\r\n        xhr.send();\r\n    },\r\n\r\n    upload2: function(xhr) {\r\n        try {\r\n            var data = JSON.parse(xhr.responseText);\r\n            var url = data[this.props.prop]\r\n            this.set('data', data);\r\n            this.xhr.open('PUT', url);\r\n            this.xhr.setRequestHeader('Content-Type', this.file.type);\r\n            if (url.indexOf('x-amz-acl=') != -1) {\r\n                // could be improved\r\n                var acl = url.substr(url.indexOf('x-amz-acl=') + 10);\r\n                if (acl.indexOf('&') != -1) acl = acl.substr(acl.indexOf('&'));\r\n                this.xhr.setRequestHeader('x-amz-acl', acl);\r\n            }\r\n            this.xhr.send(this.file);\r\n        } catch (err) {\r\n            this.onError(err);\r\n        }\r\n    }\r\n\r\n});"]}